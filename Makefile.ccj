BUILD_FLAGS ?=
CLANG_TIDY_BIN ?= clang-tidy
CLANG_TIDY_OPTS ?= --quiet
CLANG_UML_BIN ?= clang-uml
CLANG_UML_OPTS ?=

OS_UNAME := $(shell uname -s)
ifeq ($(OS_UNAME),Linux)
	SDKROOT ?=
	CLANGXX_BIN ?= clang++-19
else ifeq ($(OS_UNAME),Darwin)
	SDKROOT ?= $(shell xcrun --show-sdk-path)
	CLANGXX_BIN ?= $(LLVM_PREFIX)/bin/clang++
endif

COLOR_RED=1
COLOR_GREEN=2
COLOR_YELLOW=3
COLOR_BLUE=4
COLOR_MAGENTA=5
COLOR_CYAN=6
COLOR_WHITE=7

BASH_BLOCK_START = printf "$(shell tput setaf $(COLOR_YELLOW))**Version**\n\n\`\`\`bash\n"
BASH_BLOCK_END = printf "\`\`\`$(shell tput sgr0)\n"

SETUP_BLOCK_START = printf "$(shell tput setaf $(COLOR_BLUE))**Setup**\n\n\`\`\`bash\n"
SETUP_BLOCK_END = printf "\n\`\`\`$(shell tput sgr0)\n"

BUILDFILE_BLOCK_START = printf "\`\`\`\n"
BUILDFILE_BLOCK_END = printf "\n\`\`\`\n\n"

GENERATE_BLOCK_START = printf "\n\`\`\`bash\n"
GENERATE_BLOCK_END = printf "\n\`\`\`\n"

INSTRUCTIONS_BLOCK_START = printf "$(shell tput setaf $(COLOR_CYAN))**Instructions**\n\n"
INSTRUCTIONS_BLOCK_END = printf "$(shell tput sgr0)\n"

JSON_BLOCK_START = printf "$(shell tput setaf $(COLOR_MAGENTA))**Result**\n\n\`\`\`json\n"
JSON_BLOCK_END = printf "\`\`\`$(shell tput sgr0)\n"

print_version = $(BASH_BLOCK_START) && echo "$$" $(1) && $(1) || true && $(BASH_BLOCK_END)
print_compdb = 	$(JSON_BLOCK_START) && cat $(1)/compile_commands.json && $(JSON_BLOCK_END)
print_generate_compdb = $(GENERATE_BLOCK_START) && printf "$$ $(strip $(1))" && $(GENERATE_BLOCK_END)

print_build_files = $(foreach bf,$(1),true && printf "\`$(bf)\`:\n" && $(BUILDFILE_BLOCK_START) && cat "$(CURDIR)/$(bf)" && $(BUILDFILE_BLOCK_END))

print_setup_cmd = $(SETUP_BLOCK_START) && printf "$$ $(strip $(1))" && $(SETUP_BLOCK_END)


run_clang_tidy = SDKROOT=$(SDKROOT) $(CLANG_TIDY_BIN) $(CLANG_TIDY_OPTS) -p $(1) src/hello.cc
run_clang_uml = $(CLANG_UML_BIN) $(CLANG_UML_OPTS) -d $(1)

.DEFAULT_GOAL := all
.PHONY: all

compdb_dir = .

setup_cmd = true

build_system_files=

all:
	$(call print_setup_cmd,$(setup_cmd))
	$(call setup_cmd)
	$(call print_version,$(print_version_cmd))
	$(call INSTRUCTIONS_BLOCK_START)
	$(call print_build_files,$(build_system_files))
	$(call print_generate_compdb,$(generate_compdb))
	$(call INSTRUCTIONS_BLOCK_END)
	$(call generate_compdb)
	$(call print_compdb,$(compdb_dir))
	$(call run_clang_tidy,$(compdb_dir))
	$(call run_clang_uml,$(compdb_dir))